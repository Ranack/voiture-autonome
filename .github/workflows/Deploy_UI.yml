name: Streamlit UI Application

on:
  push:
    branches:
      - "main"
    paths:
      - "app.py"  # Chemin du fichier Streamlit
      - "test_app.py"  # Chemin du fichier de tests pour l'UI
      - ".github/workflows/*.yml"
  pull_request:
    branches:
      - "main"
    paths:
      - "app.py"  # Chemin du fichier Streamlit
      - "test_app.py"  # Chemin du fichier de tests pour l'UI
      - ".github/workflows/*.yml"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest streamlit requests pytest-mock
        if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi
        echo "üîç V√©rification des packages install√©s :"
        pip list

    - name: List files in the workspace
      run: |
        ls -R

    - name: Run Streamlit app
      run: |
        streamlit run app.py &  # Lancez l'application Streamlit en arri√®re-plan
        sleep 10  # Attendez quelques secondes pour que l'application d√©marre
      shell: /usr/bin/bash -e {0}
      env:
        pythonLocation: /opt/hostedtoolcache/Python/3.10.16/x64
        LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.16/x64/lib

    - name: Run UI tests
      run: |
        python -m pytest test_app.py

    - name: Verify Streamlit app is running
      run: |
        curl -sSf http://localhost:8501 > /dev/null  # V√©rifiez que l'application est en cours d'ex√©cution
