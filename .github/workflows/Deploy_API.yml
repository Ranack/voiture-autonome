name: Python application

on:
  push:
    branches:
      - "main"
    paths:
      - "API/**"
      - ".github/workflows/*.yml"
  pull_request:
    branches:
      - "main"
    paths:
      - "API/**"
      - ".github/workflows/*.yml"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Git LFS
      run: |
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
        sudo apt-get install git-lfs
        git lfs install

    - name: Restore LFS Cache
      id: restore-cache
      uses: actions/cache@v3
      with:
        path: .git/lfs
        key: lfs-model-cache-${{ runner.os }}-${{ hashFiles('API/Model/efficientnet_fpn_model_best_iou_diceloss.keras') }}
        restore-keys: |
          lfs-model-cache-${{ runner.os }}-

    - name: Pull LFS files
      run: git lfs pull

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('API/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest fastapi httpx Pillow numpy==1.23.5 scipy==1.10.1 tensorflow segmentation-models
        if [ -f API/requirements.txt ]; then pip install --no-cache-dir -r API/requirements.txt; fi
        echo "üîç V√©rification des packages install√©s :"
        pip list

    - name: Verify file existence
      run: |
        if [ ! -f "API/Model/efficientnet_fpn_model_best_iou_diceloss.keras" ]; then
          echo "Mod√®le introuvable : API/Model/efficientnet_fpn_model_best_iou_diceloss.keras"
          exit 1
        fi

    - name: Ensure API package is recognized
      run: |
        touch API/__init__.py

    - name: Set PYTHONPATH
      run: |
        echo "Setting PYTHONPATH"
        export PYTHONPATH=$PYTHONPATH:/home/runner/work/voiture-autonome/voiture-autonome/API

    - name: Test with pytest
      run: |
        python -m pytest API/testapi.py
      env:
        PYTHONPATH: /home/runner/work/voiture-autonome/voiture-autonome/API

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./API/Dockerfile
        push: false
        tags: ranack/projetauto:temp
        outputs: type=docker,dest=/tmp/image.tar

    - name: Push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./API/Dockerfile
        push: true
        tags: ranack/projetauto:latest

    - name: Deploy Docker image to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'twisentiment-v2'
        images: 'ranack/projetauto:latest'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
